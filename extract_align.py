from Bio import SeqIO
import argparse
import os
import re
import subprocess
import fileinput
from Bio.Seq import Seq
from Bio import SeqIO
from Bio.Alphabet import generic_dna
import sys


####MAIN function
def get_args():
	parser = argparse.ArgumentParser(description="Will process a blast output generated using a file of putative TEs (usually generated by RepeatModeler. For each putative consensus in the input putative TE library, it will generate an aligned file with N buffered instances from the queried genome, the input consensus, and, if requested, a new revised and extended consensus for inspection.", formatter_class=argparse.ArgumentDefaultsHelpFormatter)
	parser.add_argument('-g', '--genome', type=str, help='Name of the fasta formatted genome to be queried.', required=True)
	parser.add_argument('-b', '--blastfile', type=str, help='Blast output to be used. Must be formatted using "outfmt 6".', required = True)
	parser.add_argument('-l', '--library', type=str, help='Library of putative TE consensus sequences to be extracted and aligned. Must be in fasta format with no # or / in the headers.', required = True)
	parser.add_argument('-b', '--buffer', type=int, help='Buffer size. The number of bp of flanking sequence for each hit to be extracted along with the hit. Optional, Default = 1000', default = 1000)
	parser.add_argument('-n', '--hitnumber', type=str, help='The number of hits to be exracted. Optional. Default = 50.', default = 50)
	parser.add_argument('-a', '--align', type=str, help='Align the output fasta file, y or n?. Default is y.', default = 'y')
	parser.add_argument('-e', '--emboss', type=int, help='Generate a trimal/emboss consensus, y or n. Optional.', default = 'y')

	args = parser.parse_args()
	GENOME = args.genome
	BLAST = args.blastfile
	LIB = args.library
	BUFFER = args.buffer
	HITNUM = args.hitnumber
	ALIGN = args.align
	EMBOSS = args.emboss


	return GENOME, BLAST, LIB, BUFFER, HITNUM, ALIGN, EMBOSS

##Get input arguments
	GENOME, BLAST, LIB, BUFFER, HITNUM, ALIGN, EMBOSS = get_args()
	print('Input genome = ' + GENOME)
	print('Input blast file = ' + BLAST)
	print('Input library file = ' + LIB)
	print('Buffer size = ' + BUFFER)
	print('Number of hits to target = ' + HITNUM)

	
##Determine optional arguments and print to screen.
	if ALIGN == 'n' and EMBOSS == 'y':
		print('Input is contradictory. Generating a new consensus with emboss requires muscle alignment.')
	elif ALIGN == 'y' and EMBOSS == 'y':
		print('Output files will be aligned and a new consensus will be generated with emboss and trimal.')
	elif ALIGN == 'y' and EMBOSS == 'n':
		print('Output files will be aligned but without a new emboss/trimal consensus.')
	elif ALIGN == 'n' and EMBOSS == 'n':
		print('Extractions will be made but no alignment.')
	else:
		print('Invalid input for either align, or emboss, or both.')

def REVCOMP(INPUT):
	for record in SeqIO.parse(INPUT, 'fasta'):
		REVSEQ = record.reverse_complement(id='rc_' + record.id, description = 'add coordinates when actually working')
		return REVSEQ
#		SeqIO.write(REVSEQ, 'revseq.fa', 'fasta')



def main():



if __name__ =="__main__":main()
